// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"github.com/DVKunion/SeaMoon/pkg/api/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newProxy(db *gorm.DB, opts ...gen.DOOption) proxy {
	_proxy := proxy{}

	_proxy.proxyDo.UseDB(db, opts...)
	_proxy.proxyDo.UseModel(&models.Proxy{})

	tableName := _proxy.proxyDo.TableName()
	_proxy.ALL = field.NewAsterisk(tableName)
	_proxy.ID = field.NewUint(tableName, "id")
	_proxy.CreatedAt = field.NewTime(tableName, "created_at")
	_proxy.UpdatedAt = field.NewTime(tableName, "updated_at")
	_proxy.DeletedAt = field.NewField(tableName, "deleted_at")
	_proxy.TunnelID = field.NewUint(tableName, "tunnel_id")
	_proxy.Name = field.NewString(tableName, "name")
	_proxy.Type = field.NewString(tableName, "type")
	_proxy.Status = field.NewInt8(tableName, "status")
	_proxy.StatusMessage = field.NewString(tableName, "status_message")
	_proxy.Conn = field.NewInt(tableName, "conn")
	_proxy.SpeedUp = field.NewFloat64(tableName, "speed_up")
	_proxy.SpeedDown = field.NewFloat64(tableName, "speed_down")
	_proxy.Lag = field.NewInt64(tableName, "lag")
	_proxy.InBound = field.NewInt64(tableName, "in_bound")
	_proxy.OutBound = field.NewInt64(tableName, "out_bound")
	_proxy.ListenAddr = field.NewString(tableName, "listen_addr")
	_proxy.ListenPort = field.NewString(tableName, "listen_port")

	_proxy.fillFieldMap()

	return _proxy
}

type proxy struct {
	proxyDo proxyDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	TunnelID      field.Uint
	Name          field.String
	Type          field.String
	Status        field.Int8
	StatusMessage field.String
	Conn          field.Int
	SpeedUp       field.Float64
	SpeedDown     field.Float64
	Lag           field.Int64
	InBound       field.Int64
	OutBound      field.Int64
	ListenAddr    field.String
	ListenPort    field.String

	fieldMap map[string]field.Expr
}

func (p proxy) Table(newTableName string) *proxy {
	p.proxyDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proxy) As(alias string) *proxy {
	p.proxyDo.DO = *(p.proxyDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proxy) updateTableName(table string) *proxy {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.TunnelID = field.NewUint(table, "tunnel_id")
	p.Name = field.NewString(table, "name")
	p.Type = field.NewString(table, "type")
	p.Status = field.NewInt8(table, "status")
	p.StatusMessage = field.NewString(table, "status_message")
	p.Conn = field.NewInt(table, "conn")
	p.SpeedUp = field.NewFloat64(table, "speed_up")
	p.SpeedDown = field.NewFloat64(table, "speed_down")
	p.Lag = field.NewInt64(table, "lag")
	p.InBound = field.NewInt64(table, "in_bound")
	p.OutBound = field.NewInt64(table, "out_bound")
	p.ListenAddr = field.NewString(table, "listen_addr")
	p.ListenPort = field.NewString(table, "listen_port")

	p.fillFieldMap()

	return p
}

func (p *proxy) WithContext(ctx context.Context) IProxyDo { return p.proxyDo.WithContext(ctx) }

func (p proxy) TableName() string { return p.proxyDo.TableName() }

func (p proxy) Alias() string { return p.proxyDo.Alias() }

func (p proxy) Columns(cols ...field.Expr) gen.Columns { return p.proxyDo.Columns(cols...) }

func (p *proxy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proxy) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 17)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["tunnel_id"] = p.TunnelID
	p.fieldMap["name"] = p.Name
	p.fieldMap["type"] = p.Type
	p.fieldMap["status"] = p.Status
	p.fieldMap["status_message"] = p.StatusMessage
	p.fieldMap["conn"] = p.Conn
	p.fieldMap["speed_up"] = p.SpeedUp
	p.fieldMap["speed_down"] = p.SpeedDown
	p.fieldMap["lag"] = p.Lag
	p.fieldMap["in_bound"] = p.InBound
	p.fieldMap["out_bound"] = p.OutBound
	p.fieldMap["listen_addr"] = p.ListenAddr
	p.fieldMap["listen_port"] = p.ListenPort
}

func (p proxy) clone(db *gorm.DB) proxy {
	p.proxyDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proxy) replaceDB(db *gorm.DB) proxy {
	p.proxyDo.ReplaceDB(db)
	return p
}

type proxyDo struct{ gen.DO }

type IProxyDo interface {
	gen.SubQuery
	Debug() IProxyDo
	WithContext(ctx context.Context) IProxyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProxyDo
	WriteDB() IProxyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProxyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProxyDo
	Not(conds ...gen.Condition) IProxyDo
	Or(conds ...gen.Condition) IProxyDo
	Select(conds ...field.Expr) IProxyDo
	Where(conds ...gen.Condition) IProxyDo
	Order(conds ...field.Expr) IProxyDo
	Distinct(cols ...field.Expr) IProxyDo
	Omit(cols ...field.Expr) IProxyDo
	Join(table schema.Tabler, on ...field.Expr) IProxyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProxyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProxyDo
	Group(cols ...field.Expr) IProxyDo
	Having(conds ...gen.Condition) IProxyDo
	Limit(limit int) IProxyDo
	Offset(offset int) IProxyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProxyDo
	Unscoped() IProxyDo
	Create(values ...*models.Proxy) error
	CreateInBatches(values []*models.Proxy, batchSize int) error
	Save(values ...*models.Proxy) error
	First() (*models.Proxy, error)
	Take() (*models.Proxy, error)
	Last() (*models.Proxy, error)
	Find() ([]*models.Proxy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Proxy, err error)
	FindInBatches(result *[]*models.Proxy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Proxy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProxyDo
	Assign(attrs ...field.AssignExpr) IProxyDo
	Joins(fields ...field.RelationField) IProxyDo
	Preload(fields ...field.RelationField) IProxyDo
	FirstOrInit() (*models.Proxy, error)
	FirstOrCreate() (*models.Proxy, error)
	FindByPage(offset int, limit int) (result []*models.Proxy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProxyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p proxyDo) Debug() IProxyDo {
	return p.withDO(p.DO.Debug())
}

func (p proxyDo) WithContext(ctx context.Context) IProxyDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proxyDo) ReadDB() IProxyDo {
	return p.Clauses(dbresolver.Read)
}

func (p proxyDo) WriteDB() IProxyDo {
	return p.Clauses(dbresolver.Write)
}

func (p proxyDo) Session(config *gorm.Session) IProxyDo {
	return p.withDO(p.DO.Session(config))
}

func (p proxyDo) Clauses(conds ...clause.Expression) IProxyDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proxyDo) Returning(value interface{}, columns ...string) IProxyDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proxyDo) Not(conds ...gen.Condition) IProxyDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proxyDo) Or(conds ...gen.Condition) IProxyDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proxyDo) Select(conds ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proxyDo) Where(conds ...gen.Condition) IProxyDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proxyDo) Order(conds ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proxyDo) Distinct(cols ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proxyDo) Omit(cols ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proxyDo) Join(table schema.Tabler, on ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proxyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProxyDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proxyDo) RightJoin(table schema.Tabler, on ...field.Expr) IProxyDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proxyDo) Group(cols ...field.Expr) IProxyDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proxyDo) Having(conds ...gen.Condition) IProxyDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proxyDo) Limit(limit int) IProxyDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proxyDo) Offset(offset int) IProxyDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proxyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProxyDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proxyDo) Unscoped() IProxyDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proxyDo) Create(values ...*models.Proxy) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proxyDo) CreateInBatches(values []*models.Proxy, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proxyDo) Save(values ...*models.Proxy) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proxyDo) First() (*models.Proxy, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Proxy), nil
	}
}

func (p proxyDo) Take() (*models.Proxy, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Proxy), nil
	}
}

func (p proxyDo) Last() (*models.Proxy, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Proxy), nil
	}
}

func (p proxyDo) Find() ([]*models.Proxy, error) {
	result, err := p.DO.Find()
	return result.([]*models.Proxy), err
}

func (p proxyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Proxy, err error) {
	buf := make([]*models.Proxy, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proxyDo) FindInBatches(result *[]*models.Proxy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proxyDo) Attrs(attrs ...field.AssignExpr) IProxyDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proxyDo) Assign(attrs ...field.AssignExpr) IProxyDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proxyDo) Joins(fields ...field.RelationField) IProxyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proxyDo) Preload(fields ...field.RelationField) IProxyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proxyDo) FirstOrInit() (*models.Proxy, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Proxy), nil
	}
}

func (p proxyDo) FirstOrCreate() (*models.Proxy, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Proxy), nil
	}
}

func (p proxyDo) FindByPage(offset int, limit int) (result []*models.Proxy, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proxyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proxyDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proxyDo) Delete(models ...*models.Proxy) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proxyDo) withDO(do gen.Dao) *proxyDo {
	p.DO = *do.(*gen.DO)
	return p
}
