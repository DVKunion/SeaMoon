// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"github.com/DVKunion/SeaMoon/pkg/api/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAuth(db *gorm.DB, opts ...gen.DOOption) auth {
	_auth := auth{}

	_auth.authDo.UseDB(db, opts...)
	_auth.authDo.UseModel(&models.Auth{})

	tableName := _auth.authDo.TableName()
	_auth.ALL = field.NewAsterisk(tableName)
	_auth.ID = field.NewUint(tableName, "id")
	_auth.CreatedAt = field.NewTime(tableName, "created_at")
	_auth.UpdatedAt = field.NewTime(tableName, "updated_at")
	_auth.DeletedAt = field.NewField(tableName, "deleted_at")
	_auth.Type = field.NewInt8(tableName, "type")
	_auth.Username = field.NewString(tableName, "username")
	_auth.Password = field.NewString(tableName, "password")
	_auth.LastLogin = field.NewString(tableName, "last_login")
	_auth.LastAddr = field.NewString(tableName, "last_addr")

	_auth.fillFieldMap()

	return _auth
}

type auth struct {
	authDo authDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Type      field.Int8
	Username  field.String
	Password  field.String
	LastLogin field.String
	LastAddr  field.String

	fieldMap map[string]field.Expr
}

func (a auth) Table(newTableName string) *auth {
	a.authDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a auth) As(alias string) *auth {
	a.authDo.DO = *(a.authDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *auth) updateTableName(table string) *auth {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Type = field.NewInt8(table, "type")
	a.Username = field.NewString(table, "username")
	a.Password = field.NewString(table, "password")
	a.LastLogin = field.NewString(table, "last_login")
	a.LastAddr = field.NewString(table, "last_addr")

	a.fillFieldMap()

	return a
}

func (a *auth) WithContext(ctx context.Context) IAuthDo { return a.authDo.WithContext(ctx) }

func (a auth) TableName() string { return a.authDo.TableName() }

func (a auth) Alias() string { return a.authDo.Alias() }

func (a auth) Columns(cols ...field.Expr) gen.Columns { return a.authDo.Columns(cols...) }

func (a *auth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *auth) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["type"] = a.Type
	a.fieldMap["username"] = a.Username
	a.fieldMap["password"] = a.Password
	a.fieldMap["last_login"] = a.LastLogin
	a.fieldMap["last_addr"] = a.LastAddr
}

func (a auth) clone(db *gorm.DB) auth {
	a.authDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a auth) replaceDB(db *gorm.DB) auth {
	a.authDo.ReplaceDB(db)
	return a
}

type authDo struct{ gen.DO }

type IAuthDo interface {
	gen.SubQuery
	Debug() IAuthDo
	WithContext(ctx context.Context) IAuthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthDo
	WriteDB() IAuthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthDo
	Not(conds ...gen.Condition) IAuthDo
	Or(conds ...gen.Condition) IAuthDo
	Select(conds ...field.Expr) IAuthDo
	Where(conds ...gen.Condition) IAuthDo
	Order(conds ...field.Expr) IAuthDo
	Distinct(cols ...field.Expr) IAuthDo
	Omit(cols ...field.Expr) IAuthDo
	Join(table schema.Tabler, on ...field.Expr) IAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthDo
	Group(cols ...field.Expr) IAuthDo
	Having(conds ...gen.Condition) IAuthDo
	Limit(limit int) IAuthDo
	Offset(offset int) IAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthDo
	Unscoped() IAuthDo
	Create(values ...*models.Auth) error
	CreateInBatches(values []*models.Auth, batchSize int) error
	Save(values ...*models.Auth) error
	First() (*models.Auth, error)
	Take() (*models.Auth, error)
	Last() (*models.Auth, error)
	Find() ([]*models.Auth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Auth, err error)
	FindInBatches(result *[]*models.Auth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Auth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthDo
	Assign(attrs ...field.AssignExpr) IAuthDo
	Joins(fields ...field.RelationField) IAuthDo
	Preload(fields ...field.RelationField) IAuthDo
	FirstOrInit() (*models.Auth, error)
	FirstOrCreate() (*models.Auth, error)
	FindByPage(offset int, limit int) (result []*models.Auth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authDo) Debug() IAuthDo {
	return a.withDO(a.DO.Debug())
}

func (a authDo) WithContext(ctx context.Context) IAuthDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authDo) ReadDB() IAuthDo {
	return a.Clauses(dbresolver.Read)
}

func (a authDo) WriteDB() IAuthDo {
	return a.Clauses(dbresolver.Write)
}

func (a authDo) Session(config *gorm.Session) IAuthDo {
	return a.withDO(a.DO.Session(config))
}

func (a authDo) Clauses(conds ...clause.Expression) IAuthDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authDo) Returning(value interface{}, columns ...string) IAuthDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authDo) Not(conds ...gen.Condition) IAuthDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authDo) Or(conds ...gen.Condition) IAuthDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authDo) Select(conds ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authDo) Where(conds ...gen.Condition) IAuthDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authDo) Order(conds ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authDo) Distinct(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authDo) Omit(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authDo) Join(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authDo) Group(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authDo) Having(conds ...gen.Condition) IAuthDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authDo) Limit(limit int) IAuthDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authDo) Offset(offset int) IAuthDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authDo) Unscoped() IAuthDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authDo) Create(values ...*models.Auth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authDo) CreateInBatches(values []*models.Auth, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authDo) Save(values ...*models.Auth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authDo) First() (*models.Auth, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Auth), nil
	}
}

func (a authDo) Take() (*models.Auth, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Auth), nil
	}
}

func (a authDo) Last() (*models.Auth, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Auth), nil
	}
}

func (a authDo) Find() ([]*models.Auth, error) {
	result, err := a.DO.Find()
	return result.([]*models.Auth), err
}

func (a authDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Auth, err error) {
	buf := make([]*models.Auth, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authDo) FindInBatches(result *[]*models.Auth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authDo) Attrs(attrs ...field.AssignExpr) IAuthDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authDo) Assign(attrs ...field.AssignExpr) IAuthDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authDo) Joins(fields ...field.RelationField) IAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authDo) Preload(fields ...field.RelationField) IAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authDo) FirstOrInit() (*models.Auth, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Auth), nil
	}
}

func (a authDo) FirstOrCreate() (*models.Auth, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Auth), nil
	}
}

func (a authDo) FindByPage(offset int, limit int) (result []*models.Auth, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authDo) Delete(models ...*models.Auth) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authDo) withDO(do gen.Dao) *authDo {
	a.DO = *do.(*gen.DO)
	return a
}
