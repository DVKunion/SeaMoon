// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q        = new(Query)
	Account  *account
	Config   *config
	Provider *provider
	Proxy    *proxy
	Tunnel   *tunnel
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Account = &Q.Account
	Config = &Q.Config
	Provider = &Q.Provider
	Proxy = &Q.Proxy
	Tunnel = &Q.Tunnel
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:       db,
		Account:  newAccount(db, opts...),
		Config:   newConfig(db, opts...),
		Provider: newProvider(db, opts...),
		Proxy:    newProxy(db, opts...),
		Tunnel:   newTunnel(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Account  account
	Config   config
	Provider provider
	Proxy    proxy
	Tunnel   tunnel
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Account:  q.Account.clone(db),
		Config:   q.Config.clone(db),
		Provider: q.Provider.clone(db),
		Proxy:    q.Proxy.clone(db),
		Tunnel:   q.Tunnel.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:       db,
		Account:  q.Account.replaceDB(db),
		Config:   q.Config.replaceDB(db),
		Provider: q.Provider.replaceDB(db),
		Proxy:    q.Proxy.replaceDB(db),
		Tunnel:   q.Tunnel.replaceDB(db),
	}
}

type queryCtx struct {
	Account  IAccountDo
	Config   IConfigDo
	Provider IProviderDo
	Proxy    IProxyDo
	Tunnel   ITunnelDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Account:  q.Account.WithContext(ctx),
		Config:   q.Config.WithContext(ctx),
		Provider: q.Provider.WithContext(ctx),
		Proxy:    q.Proxy.WithContext(ctx),
		Tunnel:   q.Tunnel.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
