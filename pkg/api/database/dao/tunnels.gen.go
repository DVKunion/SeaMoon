// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"github.com/DVKunion/SeaMoon/pkg/api/models"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTunnel(db *gorm.DB, opts ...gen.DOOption) tunnel {
	_tunnel := tunnel{}

	_tunnel.tunnelDo.UseDB(db, opts...)
	_tunnel.tunnelDo.UseModel(&models.Tunnel{})

	tableName := _tunnel.tunnelDo.TableName()
	_tunnel.ALL = field.NewAsterisk(tableName)
	_tunnel.ID = field.NewUint(tableName, "id")
	_tunnel.CreatedAt = field.NewTime(tableName, "created_at")
	_tunnel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tunnel.DeletedAt = field.NewField(tableName, "deleted_at")
	_tunnel.ProviderId = field.NewUint(tableName, "provider_id")
	_tunnel.UniqID = field.NewString(tableName, "uniq_id")
	_tunnel.Name = field.NewString(tableName, "name")
	_tunnel.Addr = field.NewString(tableName, "addr")
	_tunnel.Port = field.NewInt32(tableName, "port")
	_tunnel.Type = field.NewString(tableName, "type")
	_tunnel.Status = field.NewInt8(tableName, "status")
	_tunnel.StatusMessage = field.NewString(tableName, "status_message")
	_tunnel.Region = field.NewString(tableName, "region")
	_tunnel.CPU = field.NewFloat32(tableName, "cpu")
	_tunnel.Memory = field.NewInt32(tableName, "memory")
	_tunnel.Instance = field.NewInt32(tableName, "instance")
	_tunnel.FcAuthType = field.NewInt8(tableName, "fc_auth_type")
	_tunnel.TLS = field.NewBool(tableName, "tls")
	_tunnel.Tor = field.NewBool(tableName, "tor")
	_tunnel.Proxies = tunnelHasManyProxies{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Proxies", "models.Proxy"),
	}

	_tunnel.fillFieldMap()

	return _tunnel
}

type tunnel struct {
	tunnelDo tunnelDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ProviderId    field.Uint
	UniqID        field.String
	Name          field.String
	Addr          field.String
	Port          field.Int32
	Type          field.String
	Status        field.Int8
	StatusMessage field.String
	Region        field.String
	CPU           field.Float32
	Memory        field.Int32
	Instance      field.Int32
	FcAuthType    field.Int8
	TLS           field.Bool
	Tor           field.Bool
	Proxies       tunnelHasManyProxies

	fieldMap map[string]field.Expr
}

func (t tunnel) Table(newTableName string) *tunnel {
	t.tunnelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tunnel) As(alias string) *tunnel {
	t.tunnelDo.DO = *(t.tunnelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tunnel) updateTableName(table string) *tunnel {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.ProviderId = field.NewUint(table, "provider_id")
	t.UniqID = field.NewString(table, "uniq_id")
	t.Name = field.NewString(table, "name")
	t.Addr = field.NewString(table, "addr")
	t.Port = field.NewInt32(table, "port")
	t.Type = field.NewString(table, "type")
	t.Status = field.NewInt8(table, "status")
	t.StatusMessage = field.NewString(table, "status_message")
	t.Region = field.NewString(table, "region")
	t.CPU = field.NewFloat32(table, "cpu")
	t.Memory = field.NewInt32(table, "memory")
	t.Instance = field.NewInt32(table, "instance")
	t.FcAuthType = field.NewInt8(table, "fc_auth_type")
	t.TLS = field.NewBool(table, "tls")
	t.Tor = field.NewBool(table, "tor")

	t.fillFieldMap()

	return t
}

func (t *tunnel) WithContext(ctx context.Context) ITunnelDo { return t.tunnelDo.WithContext(ctx) }

func (t tunnel) TableName() string { return t.tunnelDo.TableName() }

func (t tunnel) Alias() string { return t.tunnelDo.Alias() }

func (t tunnel) Columns(cols ...field.Expr) gen.Columns { return t.tunnelDo.Columns(cols...) }

func (t *tunnel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tunnel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.ID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["provider_id"] = t.ProviderId
	t.fieldMap["uniq_id"] = t.UniqID
	t.fieldMap["name"] = t.Name
	t.fieldMap["addr"] = t.Addr
	t.fieldMap["port"] = t.Port
	t.fieldMap["type"] = t.Type
	t.fieldMap["status"] = t.Status
	t.fieldMap["status_message"] = t.StatusMessage
	t.fieldMap["region"] = t.Region
	t.fieldMap["cpu"] = t.CPU
	t.fieldMap["memory"] = t.Memory
	t.fieldMap["instance"] = t.Instance
	t.fieldMap["fc_auth_type"] = t.FcAuthType
	t.fieldMap["tls"] = t.TLS
	t.fieldMap["tor"] = t.Tor

}

func (t tunnel) clone(db *gorm.DB) tunnel {
	t.tunnelDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tunnel) replaceDB(db *gorm.DB) tunnel {
	t.tunnelDo.ReplaceDB(db)
	return t
}

type tunnelHasManyProxies struct {
	db *gorm.DB

	field.RelationField
}

func (a tunnelHasManyProxies) Where(conds ...field.Expr) *tunnelHasManyProxies {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tunnelHasManyProxies) WithContext(ctx context.Context) *tunnelHasManyProxies {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tunnelHasManyProxies) Session(session *gorm.Session) *tunnelHasManyProxies {
	a.db = a.db.Session(session)
	return &a
}

func (a tunnelHasManyProxies) Model(m *models.Tunnel) *tunnelHasManyProxiesTx {
	return &tunnelHasManyProxiesTx{a.db.Model(m).Association(a.Name())}
}

type tunnelHasManyProxiesTx struct{ tx *gorm.Association }

func (a tunnelHasManyProxiesTx) Find() (result []*models.Proxy, err error) {
	return result, a.tx.Find(&result)
}

func (a tunnelHasManyProxiesTx) Append(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tunnelHasManyProxiesTx) Replace(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tunnelHasManyProxiesTx) Delete(values ...*models.Proxy) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tunnelHasManyProxiesTx) Clear() error {
	return a.tx.Clear()
}

func (a tunnelHasManyProxiesTx) Count() int64 {
	return a.tx.Count()
}

type tunnelDo struct{ gen.DO }

type ITunnelDo interface {
	gen.SubQuery
	Debug() ITunnelDo
	WithContext(ctx context.Context) ITunnelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITunnelDo
	WriteDB() ITunnelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITunnelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITunnelDo
	Not(conds ...gen.Condition) ITunnelDo
	Or(conds ...gen.Condition) ITunnelDo
	Select(conds ...field.Expr) ITunnelDo
	Where(conds ...gen.Condition) ITunnelDo
	Order(conds ...field.Expr) ITunnelDo
	Distinct(cols ...field.Expr) ITunnelDo
	Omit(cols ...field.Expr) ITunnelDo
	Join(table schema.Tabler, on ...field.Expr) ITunnelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITunnelDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITunnelDo
	Group(cols ...field.Expr) ITunnelDo
	Having(conds ...gen.Condition) ITunnelDo
	Limit(limit int) ITunnelDo
	Offset(offset int) ITunnelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITunnelDo
	Unscoped() ITunnelDo
	Create(values ...*models.Tunnel) error
	CreateInBatches(values []*models.Tunnel, batchSize int) error
	Save(values ...*models.Tunnel) error
	First() (*models.Tunnel, error)
	Take() (*models.Tunnel, error)
	Last() (*models.Tunnel, error)
	Find() ([]*models.Tunnel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Tunnel, err error)
	FindInBatches(result *[]*models.Tunnel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Tunnel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITunnelDo
	Assign(attrs ...field.AssignExpr) ITunnelDo
	Joins(fields ...field.RelationField) ITunnelDo
	Preload(fields ...field.RelationField) ITunnelDo
	FirstOrInit() (*models.Tunnel, error)
	FirstOrCreate() (*models.Tunnel, error)
	FindByPage(offset int, limit int) (result []*models.Tunnel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITunnelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tunnelDo) Debug() ITunnelDo {
	return t.withDO(t.DO.Debug())
}

func (t tunnelDo) WithContext(ctx context.Context) ITunnelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tunnelDo) ReadDB() ITunnelDo {
	return t.Clauses(dbresolver.Read)
}

func (t tunnelDo) WriteDB() ITunnelDo {
	return t.Clauses(dbresolver.Write)
}

func (t tunnelDo) Session(config *gorm.Session) ITunnelDo {
	return t.withDO(t.DO.Session(config))
}

func (t tunnelDo) Clauses(conds ...clause.Expression) ITunnelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tunnelDo) Returning(value interface{}, columns ...string) ITunnelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tunnelDo) Not(conds ...gen.Condition) ITunnelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tunnelDo) Or(conds ...gen.Condition) ITunnelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tunnelDo) Select(conds ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tunnelDo) Where(conds ...gen.Condition) ITunnelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tunnelDo) Order(conds ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tunnelDo) Distinct(cols ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tunnelDo) Omit(cols ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tunnelDo) Join(table schema.Tabler, on ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tunnelDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tunnelDo) RightJoin(table schema.Tabler, on ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tunnelDo) Group(cols ...field.Expr) ITunnelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tunnelDo) Having(conds ...gen.Condition) ITunnelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tunnelDo) Limit(limit int) ITunnelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tunnelDo) Offset(offset int) ITunnelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tunnelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITunnelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tunnelDo) Unscoped() ITunnelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tunnelDo) Create(values ...*models.Tunnel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tunnelDo) CreateInBatches(values []*models.Tunnel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tunnelDo) Save(values ...*models.Tunnel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tunnelDo) First() (*models.Tunnel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Tunnel), nil
	}
}

func (t tunnelDo) Take() (*models.Tunnel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Tunnel), nil
	}
}

func (t tunnelDo) Last() (*models.Tunnel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Tunnel), nil
	}
}

func (t tunnelDo) Find() ([]*models.Tunnel, error) {
	result, err := t.DO.Find()
	return result.([]*models.Tunnel), err
}

func (t tunnelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Tunnel, err error) {
	buf := make([]*models.Tunnel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tunnelDo) FindInBatches(result *[]*models.Tunnel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tunnelDo) Attrs(attrs ...field.AssignExpr) ITunnelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tunnelDo) Assign(attrs ...field.AssignExpr) ITunnelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tunnelDo) Joins(fields ...field.RelationField) ITunnelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tunnelDo) Preload(fields ...field.RelationField) ITunnelDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tunnelDo) FirstOrInit() (*models.Tunnel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Tunnel), nil
	}
}

func (t tunnelDo) FirstOrCreate() (*models.Tunnel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Tunnel), nil
	}
}

func (t tunnelDo) FindByPage(offset int, limit int) (result []*models.Tunnel, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tunnelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tunnelDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tunnelDo) Delete(models ...*models.Tunnel) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tunnelDo) withDO(do gen.Dao) *tunnelDo {
	t.DO = *do.(*gen.DO)
	return t
}
